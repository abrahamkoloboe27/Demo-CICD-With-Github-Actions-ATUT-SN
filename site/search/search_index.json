{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"CI-CD/","text":"\ud83d\udd04 Principes de CI/CD \u00b6 CI (Int\u00e9gration Continue) \u00b6 L' Int\u00e9gration Continue est une pratique de d\u00e9veloppement o\u00f9 les d\u00e9veloppeurs int\u00e8grent fr\u00e9quemment leur code dans un d\u00e9p\u00f4t partag\u00e9. Chaque int\u00e9gration est v\u00e9rifi\u00e9e par des builds automatis\u00e9s et des tests, permettant de d\u00e9tecter rapidement les erreurs et d'am\u00e9liorer la qualit\u00e9 du logiciel. CD (D\u00e9ploiement Continu) \u00b6 Le D\u00e9ploiement Continu va un cran plus loin en automatisant le d\u00e9ploiement des applications apr\u00e8s la phase de test. Cela permet de livrer les nouvelles fonctionnalit\u00e9s aux utilisateurs plus rapidement et de mani\u00e8re fiable. Comment Docker et Docker Compose Facilitent CI/CD \u00b6 Automatisation des Builds \ud83d\udee0\ufe0f : Docker permet de cr\u00e9er des images reproductibles, assurant que les applications s'ex\u00e9cutent de la m\u00eame mani\u00e8re sur tous les environnements. Avec Docker Compose, il est facile de lancer plusieurs conteneurs n\u00e9cessaires pour les tests automatis\u00e9s. D\u00e9ploiement Simplifi\u00e9 \ud83d\ude80 : Les images Docker peuvent \u00eatre pouss\u00e9es vers des registres (comme GHCR) et d\u00e9ploy\u00e9es automatiquement sur des serveurs via des pipelines CI/CD. Docker Compose facilite le lancement et la gestion des applications multi-conteneurs en production. Isolation et Consistance \ud83d\udd12 : Les conteneurs assurent que les environnements de d\u00e9veloppement, test et production sont identiques, r\u00e9duisant les probl\u00e8mes de \"\u00e7a marche sur ma machine\". Outils de CI/CD Populaires avec Docker \u00b6 GitHub Actions \ud83e\udd16 : Permet d'automatiser les workflows de CI/CD directement depuis GitHub. Int\u00e8gre facilement les builds Docker, les tests et les d\u00e9ploiements. Jenkins \ud83d\udee0\ufe0f : Un serveur d'automatisation open-source qui peut \u00eatre configur\u00e9 pour travailler avec Docker et Docker Compose. GitLab CI/CD \ud83d\udee0\ufe0f : Int\u00e9gr\u00e9 dans GitLab, il offre des pipelines CI/CD puissants avec un support natif pour Docker. Ressources Suppl\u00e9mentaires \u00b6 Guide d'Introduction \u00e0 CI/CD Docker et CI/CD : Meilleures Pratiques GitHub Actions Documentation \ud83d\udd17 Liens Utiles \u00b6 Docker \ud83d\udc33 : Documentation Officielle Docker Hub Docker Compose \ud83d\udcc4 : Documentation Officielle GitHub Actions \ud83e\udd16 : Documentation Officielle FastAPI \ud83d\udc0d : Documentation Officielle Vue.js \ud83d\udda5\ufe0f : Documentation Officielle Avec cette r\u00e9f\u00e9rence rapide, vous disposez des connaissances essentielles pour utiliser Docker et Docker Compose dans votre projet de classification de fruits. Ces outils vous aideront \u00e0 automatiser vos processus de d\u00e9veloppement, de test et de d\u00e9ploiement, assurant ainsi une livraison continue et fiable de votre application \ud83d\ude80\ud83c\udf4e. N'h\u00e9sitez pas \u00e0 consulter les liens de documentation pour approfondir vos connaissances et d\u00e9couvrir les fonctionnalit\u00e9s avanc\u00e9es de Docker et Docker Compose. Bonne continuation dans votre projet !","title":"CI/CD"},{"location":"CI-CD/#principes-de-cicd","text":"","title":"\ud83d\udd04 Principes de CI/CD"},{"location":"CI-CD/#ci-integration-continue","text":"L' Int\u00e9gration Continue est une pratique de d\u00e9veloppement o\u00f9 les d\u00e9veloppeurs int\u00e8grent fr\u00e9quemment leur code dans un d\u00e9p\u00f4t partag\u00e9. Chaque int\u00e9gration est v\u00e9rifi\u00e9e par des builds automatis\u00e9s et des tests, permettant de d\u00e9tecter rapidement les erreurs et d'am\u00e9liorer la qualit\u00e9 du logiciel.","title":"CI (Int\u00e9gration Continue)"},{"location":"CI-CD/#cd-deploiement-continu","text":"Le D\u00e9ploiement Continu va un cran plus loin en automatisant le d\u00e9ploiement des applications apr\u00e8s la phase de test. Cela permet de livrer les nouvelles fonctionnalit\u00e9s aux utilisateurs plus rapidement et de mani\u00e8re fiable.","title":"CD (D\u00e9ploiement Continu)"},{"location":"CI-CD/#comment-docker-et-docker-compose-facilitent-cicd","text":"Automatisation des Builds \ud83d\udee0\ufe0f : Docker permet de cr\u00e9er des images reproductibles, assurant que les applications s'ex\u00e9cutent de la m\u00eame mani\u00e8re sur tous les environnements. Avec Docker Compose, il est facile de lancer plusieurs conteneurs n\u00e9cessaires pour les tests automatis\u00e9s. D\u00e9ploiement Simplifi\u00e9 \ud83d\ude80 : Les images Docker peuvent \u00eatre pouss\u00e9es vers des registres (comme GHCR) et d\u00e9ploy\u00e9es automatiquement sur des serveurs via des pipelines CI/CD. Docker Compose facilite le lancement et la gestion des applications multi-conteneurs en production. Isolation et Consistance \ud83d\udd12 : Les conteneurs assurent que les environnements de d\u00e9veloppement, test et production sont identiques, r\u00e9duisant les probl\u00e8mes de \"\u00e7a marche sur ma machine\".","title":"Comment Docker et Docker Compose Facilitent CI/CD"},{"location":"CI-CD/#outils-de-cicd-populaires-avec-docker","text":"GitHub Actions \ud83e\udd16 : Permet d'automatiser les workflows de CI/CD directement depuis GitHub. Int\u00e8gre facilement les builds Docker, les tests et les d\u00e9ploiements. Jenkins \ud83d\udee0\ufe0f : Un serveur d'automatisation open-source qui peut \u00eatre configur\u00e9 pour travailler avec Docker et Docker Compose. GitLab CI/CD \ud83d\udee0\ufe0f : Int\u00e9gr\u00e9 dans GitLab, il offre des pipelines CI/CD puissants avec un support natif pour Docker.","title":"Outils de CI/CD Populaires avec Docker"},{"location":"CI-CD/#ressources-supplementaires","text":"Guide d'Introduction \u00e0 CI/CD Docker et CI/CD : Meilleures Pratiques GitHub Actions Documentation","title":"Ressources Suppl\u00e9mentaires"},{"location":"CI-CD/#liens-utiles","text":"Docker \ud83d\udc33 : Documentation Officielle Docker Hub Docker Compose \ud83d\udcc4 : Documentation Officielle GitHub Actions \ud83e\udd16 : Documentation Officielle FastAPI \ud83d\udc0d : Documentation Officielle Vue.js \ud83d\udda5\ufe0f : Documentation Officielle Avec cette r\u00e9f\u00e9rence rapide, vous disposez des connaissances essentielles pour utiliser Docker et Docker Compose dans votre projet de classification de fruits. Ces outils vous aideront \u00e0 automatiser vos processus de d\u00e9veloppement, de test et de d\u00e9ploiement, assurant ainsi une livraison continue et fiable de votre application \ud83d\ude80\ud83c\udf4e. N'h\u00e9sitez pas \u00e0 consulter les liens de documentation pour approfondir vos connaissances et d\u00e9couvrir les fonctionnalit\u00e9s avanc\u00e9es de Docker et Docker Compose. Bonne continuation dans votre projet !","title":"\ud83d\udd17 Liens Utiles"},{"location":"Docker-%26-Docker-Compose/","text":"\ud83d\udcda R\u00e9f\u00e9rence Rapide : Docker & Docker Compose \u00b6 Dans ce guide, nous allons vous fournir un rappel essentiel sur Docker et Docker Compose . Ces outils sont indispensables pour la conteneurisation et l'orchestration de vos applications. Que vous soyez d\u00e9butant ou que vous ayez besoin d'une petite r\u00e9vision, cette section vous aidera \u00e0 mieux comprendre et utiliser Docker dans votre projet de classification de fruits \ud83c\udf4e\ud83d\ude80. \ud83d\udc33 Docker \u00b6 Qu'est-ce que Docker ? \u00b6 Docker est une plateforme de conteneurisation qui permet de cr\u00e9er, d\u00e9ployer et ex\u00e9cuter des applications dans des conteneurs l\u00e9gers et portables. Un conteneur encapsule une application avec toutes ses d\u00e9pendances, garantissant ainsi qu'elle fonctionne de mani\u00e8re coh\u00e9rente quel que soit l'environnement. Concepts de Base \u00b6 Image Docker \ud83d\uddbc\ufe0f : Une image est une capture instantan\u00e9e d'un environnement logiciel, incluant le code, les biblioth\u00e8ques, les d\u00e9pendances et les configurations n\u00e9cessaires pour ex\u00e9cuter une application. Les images sont lues seule et peuvent \u00eatre partag\u00e9es via des registres comme Docker Hub ou GitHub Container Registry (GHCR) . Conteneur Docker \ud83d\udce6 : Un conteneur est une instance en cours d'ex\u00e9cution d'une image Docker. Il est isol\u00e9 du reste du syst\u00e8me, ce qui assure une portabilit\u00e9 et une consistance entre les diff\u00e9rents environnements. Les conteneurs partagent le noyau du syst\u00e8me d'exploitation mais restent ind\u00e9pendants les uns des autres. Commandes de Base \u00b6 Voici quelques commandes essentielles pour travailler avec Docker : T\u00e9l\u00e9charger une image depuis un registre : bash docker pull <nom_de_l'image> Exemple : bash docker pull nginx:latest Lister les images locales : bash docker images Construire une image \u00e0 partir d'un Dockerfile : bash docker build -t <nom_de_l'image> . Exemple : bash docker build -t demo-cicd-atut-backend Backend/ Ex\u00e9cuter un conteneur : bash docker run -d -p <port_local>:<port_conteneur> <nom_de_l'image> Exemple : bash docker run -d -p 80:80 demo-cicd-atut-frontend Lister les conteneurs en cours d'ex\u00e9cution : bash docker ps Arr\u00eater un conteneur : bash docker stop <id_ou_nom_du_conteneur> Supprimer un conteneur : bash docker rm <id_ou_nom_du_conteneur> Supprimer une image : bash docker rmi <nom_de_l'image> Acc\u00e8s et Gestion \u00b6 Acc\u00e9der au terminal d'un conteneur en cours d'ex\u00e9cution : bash docker exec -it <id_ou_nom_du_conteneur> /bin/bash V\u00e9rifier les logs d'un conteneur : bash docker logs <id_ou_nom_du_conteneur> Ressources Utiles \u00b6 Documentation Officielle de Docker Docker Hub GitHub Container Registry (GHCR) \ud83d\udcdd Docker Compose \u00b6 Qu'est-ce que Docker Compose ? \u00b6 Docker Compose est un outil permettant de d\u00e9finir et de g\u00e9rer des applications multi-conteneurs. Avec un fichier de configuration YAML ( docker-compose.yml ), vous pouvez orchestrer plusieurs conteneurs, d\u00e9finir leurs interactions, r\u00e9seaux, volumes, et bien plus encore, facilitant ainsi le d\u00e9ploiement et la gestion de votre application. Concepts de Base \u00b6 Fichier docker-compose.yml \ud83d\udcc4 : Un fichier YAML o\u00f9 vous d\u00e9finissez les services (conteneurs), les r\u00e9seaux et les volumes n\u00e9cessaires \u00e0 votre application. Permet de d\u00e9crire l'architecture de votre application de mani\u00e8re d\u00e9clarative. Services \ud83d\udee0\ufe0f : Repr\u00e9sentent les diff\u00e9rents conteneurs n\u00e9cessaires \u00e0 votre application (par exemple, backend, frontend, base de donn\u00e9es). Chaque service peut avoir ses propres configurations (ports, volumes, variables d'environnement). R\u00e9seaux \ud83c\udf10 : Permettent aux conteneurs de communiquer entre eux de mani\u00e8re isol\u00e9e. Par d\u00e9faut, Docker Compose cr\u00e9e un r\u00e9seau d\u00e9di\u00e9 pour votre application. Volumes \ud83d\udcbe : Utilis\u00e9s pour persister les donn\u00e9es g\u00e9n\u00e9r\u00e9es et utilis\u00e9es par les conteneurs. Permettent de partager des donn\u00e9es entre le conteneur et l'h\u00f4te ou entre plusieurs conteneurs. Structure d'un Fichier docker-compose.yml \u00b6 Voici un exemple simplifi\u00e9 de fichier docker-compose.yml : version : '3' services : frontend : image : ghcr.io/abrahamkoloboe27/demo-cicd-atut-frontend:latest container_name : frontend ports : - \"80:80\" networks : - demo-cicd-atut-network volumes : - frontend-data backend : image : ghcr.io/abrahamkoloboe27/demo-cicd-atut-backend:latest container_name : backend ports : - \"8080:8080\" networks : - demo-cicd-atut-network volumes : - backend-data networks : demo-cicd-atut-network : driver : bridge volumes : frontend-data : backend-data : Commandes de Base \u00b6 Lancer les services d\u00e9finis dans docker-compose.yml : bash docker-compose up -d - -d ex\u00e9cute les conteneurs en arri\u00e8re-plan (mode d\u00e9tach\u00e9). Arr\u00eater les services : bash docker-compose down - Cette commande arr\u00eate et supprime les conteneurs, r\u00e9seaux et volumes cr\u00e9\u00e9s par up . Construire ou reconstruire les services : bash docker-compose build Lister les conteneurs g\u00e9r\u00e9s par Docker Compose : bash docker-compose ps Voir les logs des services : bash docker-compose logs - Pour suivre les logs en temps r\u00e9el, utilisez docker-compose logs -f . Avantages de Docker Compose \u00b6 Simplification du D\u00e9ploiement \ud83d\udee0\ufe0f : G\u00e8re plusieurs conteneurs avec une seule commande. Facilite la configuration et le lancement d'environnements complexes. Gestion des D\u00e9pendances \ud83d\udd17 : D\u00e9finit clairement les d\u00e9pendances entre les diff\u00e9rents services de l'application. Portabilit\u00e9 \ud83c\udf0d : Le m\u00eame fichier docker-compose.yml peut \u00eatre utilis\u00e9 en d\u00e9veloppement, test et production. Ressources Utiles \u00b6 Documentation Officielle de Docker Compose Guide de D\u00e9marrage Rapide avec Docker Compose","title":"Docker et Docker Compose"},{"location":"Docker-%26-Docker-Compose/#reference-rapide-docker-docker-compose","text":"Dans ce guide, nous allons vous fournir un rappel essentiel sur Docker et Docker Compose . Ces outils sont indispensables pour la conteneurisation et l'orchestration de vos applications. Que vous soyez d\u00e9butant ou que vous ayez besoin d'une petite r\u00e9vision, cette section vous aidera \u00e0 mieux comprendre et utiliser Docker dans votre projet de classification de fruits \ud83c\udf4e\ud83d\ude80.","title":"\ud83d\udcda R\u00e9f\u00e9rence Rapide : Docker &amp; Docker Compose"},{"location":"Docker-%26-Docker-Compose/#docker","text":"","title":"\ud83d\udc33 Docker"},{"location":"Docker-%26-Docker-Compose/#quest-ce-que-docker","text":"Docker est une plateforme de conteneurisation qui permet de cr\u00e9er, d\u00e9ployer et ex\u00e9cuter des applications dans des conteneurs l\u00e9gers et portables. Un conteneur encapsule une application avec toutes ses d\u00e9pendances, garantissant ainsi qu'elle fonctionne de mani\u00e8re coh\u00e9rente quel que soit l'environnement.","title":"Qu'est-ce que Docker ?"},{"location":"Docker-%26-Docker-Compose/#concepts-de-base","text":"Image Docker \ud83d\uddbc\ufe0f : Une image est une capture instantan\u00e9e d'un environnement logiciel, incluant le code, les biblioth\u00e8ques, les d\u00e9pendances et les configurations n\u00e9cessaires pour ex\u00e9cuter une application. Les images sont lues seule et peuvent \u00eatre partag\u00e9es via des registres comme Docker Hub ou GitHub Container Registry (GHCR) . Conteneur Docker \ud83d\udce6 : Un conteneur est une instance en cours d'ex\u00e9cution d'une image Docker. Il est isol\u00e9 du reste du syst\u00e8me, ce qui assure une portabilit\u00e9 et une consistance entre les diff\u00e9rents environnements. Les conteneurs partagent le noyau du syst\u00e8me d'exploitation mais restent ind\u00e9pendants les uns des autres.","title":"Concepts de Base"},{"location":"Docker-%26-Docker-Compose/#commandes-de-base","text":"Voici quelques commandes essentielles pour travailler avec Docker : T\u00e9l\u00e9charger une image depuis un registre : bash docker pull <nom_de_l'image> Exemple : bash docker pull nginx:latest Lister les images locales : bash docker images Construire une image \u00e0 partir d'un Dockerfile : bash docker build -t <nom_de_l'image> . Exemple : bash docker build -t demo-cicd-atut-backend Backend/ Ex\u00e9cuter un conteneur : bash docker run -d -p <port_local>:<port_conteneur> <nom_de_l'image> Exemple : bash docker run -d -p 80:80 demo-cicd-atut-frontend Lister les conteneurs en cours d'ex\u00e9cution : bash docker ps Arr\u00eater un conteneur : bash docker stop <id_ou_nom_du_conteneur> Supprimer un conteneur : bash docker rm <id_ou_nom_du_conteneur> Supprimer une image : bash docker rmi <nom_de_l'image>","title":"Commandes de Base"},{"location":"Docker-%26-Docker-Compose/#acces-et-gestion","text":"Acc\u00e9der au terminal d'un conteneur en cours d'ex\u00e9cution : bash docker exec -it <id_ou_nom_du_conteneur> /bin/bash V\u00e9rifier les logs d'un conteneur : bash docker logs <id_ou_nom_du_conteneur>","title":"Acc\u00e8s et Gestion"},{"location":"Docker-%26-Docker-Compose/#ressources-utiles","text":"Documentation Officielle de Docker Docker Hub GitHub Container Registry (GHCR)","title":"Ressources Utiles"},{"location":"Docker-%26-Docker-Compose/#docker-compose","text":"","title":"\ud83d\udcdd Docker Compose"},{"location":"Docker-%26-Docker-Compose/#quest-ce-que-docker-compose","text":"Docker Compose est un outil permettant de d\u00e9finir et de g\u00e9rer des applications multi-conteneurs. Avec un fichier de configuration YAML ( docker-compose.yml ), vous pouvez orchestrer plusieurs conteneurs, d\u00e9finir leurs interactions, r\u00e9seaux, volumes, et bien plus encore, facilitant ainsi le d\u00e9ploiement et la gestion de votre application.","title":"Qu'est-ce que Docker Compose ?"},{"location":"Docker-%26-Docker-Compose/#concepts-de-base_1","text":"Fichier docker-compose.yml \ud83d\udcc4 : Un fichier YAML o\u00f9 vous d\u00e9finissez les services (conteneurs), les r\u00e9seaux et les volumes n\u00e9cessaires \u00e0 votre application. Permet de d\u00e9crire l'architecture de votre application de mani\u00e8re d\u00e9clarative. Services \ud83d\udee0\ufe0f : Repr\u00e9sentent les diff\u00e9rents conteneurs n\u00e9cessaires \u00e0 votre application (par exemple, backend, frontend, base de donn\u00e9es). Chaque service peut avoir ses propres configurations (ports, volumes, variables d'environnement). R\u00e9seaux \ud83c\udf10 : Permettent aux conteneurs de communiquer entre eux de mani\u00e8re isol\u00e9e. Par d\u00e9faut, Docker Compose cr\u00e9e un r\u00e9seau d\u00e9di\u00e9 pour votre application. Volumes \ud83d\udcbe : Utilis\u00e9s pour persister les donn\u00e9es g\u00e9n\u00e9r\u00e9es et utilis\u00e9es par les conteneurs. Permettent de partager des donn\u00e9es entre le conteneur et l'h\u00f4te ou entre plusieurs conteneurs.","title":"Concepts de Base"},{"location":"Docker-%26-Docker-Compose/#structure-dun-fichier-docker-composeyml","text":"Voici un exemple simplifi\u00e9 de fichier docker-compose.yml : version : '3' services : frontend : image : ghcr.io/abrahamkoloboe27/demo-cicd-atut-frontend:latest container_name : frontend ports : - \"80:80\" networks : - demo-cicd-atut-network volumes : - frontend-data backend : image : ghcr.io/abrahamkoloboe27/demo-cicd-atut-backend:latest container_name : backend ports : - \"8080:8080\" networks : - demo-cicd-atut-network volumes : - backend-data networks : demo-cicd-atut-network : driver : bridge volumes : frontend-data : backend-data :","title":"Structure d'un Fichier docker-compose.yml"},{"location":"Docker-%26-Docker-Compose/#commandes-de-base_1","text":"Lancer les services d\u00e9finis dans docker-compose.yml : bash docker-compose up -d - -d ex\u00e9cute les conteneurs en arri\u00e8re-plan (mode d\u00e9tach\u00e9). Arr\u00eater les services : bash docker-compose down - Cette commande arr\u00eate et supprime les conteneurs, r\u00e9seaux et volumes cr\u00e9\u00e9s par up . Construire ou reconstruire les services : bash docker-compose build Lister les conteneurs g\u00e9r\u00e9s par Docker Compose : bash docker-compose ps Voir les logs des services : bash docker-compose logs - Pour suivre les logs en temps r\u00e9el, utilisez docker-compose logs -f .","title":"Commandes de Base"},{"location":"Docker-%26-Docker-Compose/#avantages-de-docker-compose","text":"Simplification du D\u00e9ploiement \ud83d\udee0\ufe0f : G\u00e8re plusieurs conteneurs avec une seule commande. Facilite la configuration et le lancement d'environnements complexes. Gestion des D\u00e9pendances \ud83d\udd17 : D\u00e9finit clairement les d\u00e9pendances entre les diff\u00e9rents services de l'application. Portabilit\u00e9 \ud83c\udf0d : Le m\u00eame fichier docker-compose.yml peut \u00eatre utilis\u00e9 en d\u00e9veloppement, test et production.","title":"Avantages de Docker Compose"},{"location":"Docker-%26-Docker-Compose/#ressources-utiles_1","text":"Documentation Officielle de Docker Compose Guide de D\u00e9marrage Rapide avec Docker Compose","title":"Ressources Utiles"},{"location":"GithubActions/","text":"\ud83e\udd16 GitHub Actions : Automatisation Simplifi\u00e9e pour Vos Projets \ud83d\ude80 \u00b6 \ud83d\udcda Table des mati\u00e8res \u00b6 \ud83e\udd16 GitHub Actions : Automatisation Simplifi\u00e9e pour Vos Projets \ud83d\ude80 \ud83d\udcda Table des mati\u00e8res Introduction \u2728 Qu'est-ce que GitHub Actions ? \ud83d\udee0\ufe0f Concepts Cl\u00e9s \ud83d\udcc4 \u00c9crire un Workflow \ud83d\udcdd Exemple de Structure \ud83d\udd0d Trouver et Utiliser des Actions O\u00f9 Trouver des Actions ? \ud83d\udee0\ufe0f Utiliser une Action \ud83d\udd04 Cr\u00e9er une Action Personnalis\u00e9e \ud83d\udee0\ufe0f \ud83d\udcda Ressources et Documentation \ud83d\udca1 Exemples de Workflows 1. \ud83d\udc33 Build et Push d'une Image Docker 2. \ud83e\uddea Ex\u00e9cution de Tests Automatis\u00e9s \ud83c\udf89 Conclusion Introduction \u00b6 Bienvenue dans cette section d\u00e9di\u00e9e \u00e0 GitHub Actions ! \ud83c\udf89 GitHub Actions est une puissante plateforme d'int\u00e9gration continue et de d\u00e9ploiement continu (CI/CD) int\u00e9gr\u00e9e directement dans GitHub. Elle permet d'automatiser, personnaliser et ex\u00e9cuter vos workflows de d\u00e9veloppement logiciel directement depuis votre d\u00e9p\u00f4t GitHub. \u2728 Qu'est-ce que GitHub Actions ? \u00b6 GitHub Actions est un service d'automatisation propos\u00e9 par GitHub, permettant aux d\u00e9veloppeurs de cr\u00e9er des workflows personnalis\u00e9s pour automatiser des t\u00e2ches telles que : Int\u00e9gration Continue (CI) : Compiler et tester votre code \u00e0 chaque push ou pull request. D\u00e9ploiement Continu (CD) : D\u00e9ployer automatiquement vos applications sur des serveurs ou des services cloud. Automatisation de T\u00e2ches : G\u00e9rer des t\u00e2ches r\u00e9p\u00e9titives comme la gestion des issues, la mise \u00e0 jour des d\u00e9pendances, etc. Avec GitHub Actions, vous pouvez d\u00e9finir des workflows qui s'ex\u00e9cutent en r\u00e9ponse \u00e0 des \u00e9v\u00e9nements sp\u00e9cifiques dans votre d\u00e9p\u00f4t GitHub. \ud83d\udee0\ufe0f Concepts Cl\u00e9s \u00b6 Avant de plonger dans l'\u00e9criture des workflows, voici quelques concepts fondamentaux de GitHub Actions : Workflow \ud83d\uddc2\ufe0f : Un workflow est un ensemble automatis\u00e9 de t\u00e2ches d\u00e9finies dans un fichier YAML situ\u00e9 dans le r\u00e9pertoire .github/workflows/ de votre d\u00e9p\u00f4t. Il est d\u00e9clench\u00e9 par des \u00e9v\u00e9nements sp\u00e9cifiques (comme un push, une pull request, etc.). Action \ud83d\udd04 : Une action est une unit\u00e9 r\u00e9utilisable de code qui peut \u00eatre incluse dans vos workflows. Les actions peuvent \u00eatre cr\u00e9\u00e9es par la communaut\u00e9 ou par vous-m\u00eame pour accomplir des t\u00e2ches sp\u00e9cifiques. Runner \ud83c\udfc3\u200d\u2642\ufe0f : Un runner est une machine (auto-h\u00e9berg\u00e9e ou h\u00e9berg\u00e9e par GitHub) qui ex\u00e9cute les jobs de vos workflows. Job \ud83d\udcbc : Un job est une s\u00e9rie de steps (\u00e9tapes) ex\u00e9cut\u00e9es sur le m\u00eame runner. Les jobs peuvent \u00eatre parall\u00e9lis\u00e9s ou d\u00e9pendants les uns des autres. Step \ud83e\ude9c : Une step est une t\u00e2che unique ex\u00e9cut\u00e9e dans un job, pouvant \u00eatre une commande shell ou une action. Event \ud83d\udcc5 : Un event est une action qui d\u00e9clenche un workflow, comme un push, une issue ouverte, ou un planificateur (cron). \ud83d\udcc4 \u00c9crire un Workflow \u00b6 Les workflows sont d\u00e9finis dans des fichiers YAML situ\u00e9s dans le r\u00e9pertoire .github/workflows/ de votre d\u00e9p\u00f4t. Voici la structure de base d'un fichier de workflow : name : Nom du Workflow on : \u00e9v\u00e9nement : [ branche , type d'\u00e9v\u00e9nement ] jobs : nom_du_job : runs-on : ubuntu-latest steps : - name : \u00c9tape 1 uses : action/nom@version - name : \u00c9tape 2 run : commande \u00e0 ex\u00e9cuter \ud83d\udcdd Exemple de Structure \u00b6 name : Nom du workflow (affich\u00e9 dans l'interface GitHub Actions). on : D\u00e9finition des \u00e9v\u00e9nements qui d\u00e9clenchent le workflow. jobs : Liste des jobs \u00e0 ex\u00e9cuter. runs-on : Syst\u00e8me d'exploitation du runner (par exemple, ubuntu-latest ). steps : \u00c9tapes individuelles au sein du job. uses : Utilisation d'une action GitHub. run : Ex\u00e9cution d'une commande shell. \ud83d\udd0d Trouver et Utiliser des Actions \u00b6 O\u00f9 Trouver des Actions ? \ud83d\udee0\ufe0f \u00b6 GitHub propose un Marketplace o\u00f9 vous pouvez trouver des milliers d'actions cr\u00e9\u00e9es par la communaut\u00e9 et par GitHub lui-m\u00eame : GitHub Marketplace - Actions Utiliser une Action \ud83d\udd04 \u00b6 Pour utiliser une action dans votre workflow, vous pouvez r\u00e9f\u00e9rencer son chemin ou son nom dans la section uses . Par exemple, pour utiliser l'action officielle checkout : steps : - name : Checkout Repository uses : actions/checkout@v3 Cr\u00e9er une Action Personnalis\u00e9e \ud83d\udee0\ufe0f \u00b6 Si les actions disponibles ne r\u00e9pondent pas \u00e0 vos besoins, vous pouvez cr\u00e9er la v\u00f4tre. Voici les \u00e9tapes de base : Cr\u00e9er un R\u00e9pertoire pour votre action, par exemple .github/actions/mon-action . D\u00e9finir un fichier action.yml avec les m\u00e9tadonn\u00e9es de l'action. Ajouter le Code de votre action (scripts, Dockerfile, etc.). Pour plus de d\u00e9tails, consultez la documentation officielle sur la cr\u00e9ation d'actions . \ud83d\udcda Ressources et Documentation \u00b6 Documentation Officielle de GitHub Actions \ud83d\udcd6 : Introduction \u00e0 GitHub Actions D\u00e9finir des Workflows GitHub Actions Marketplace Tutoriels et Guides \ud83d\udcd8 : Guide de D\u00e9marrage Rapide Cr\u00e9er une Action Personnalis\u00e9e Communaut\u00e9 et Support \ud83d\udcac : GitHub Community Discussions Stack Overflow - Tag GitHub Actions \ud83d\udca1 Exemples de Workflows \u00b6 1. \ud83d\udc33 Build et Push d'une Image Docker \u00b6 Ce workflow est d\u00e9clench\u00e9 \u00e0 chaque push sur la branche principale. Il construit une image Docker et la pousse vers GitHub Container Registry (GHCR). name : Build and Push Docker Image on : push : branches : [ main ] jobs : build : runs-on : ubuntu-latest steps : # Checkout du code source - name : Checkout Repository uses : actions/checkout@v3 # Configuration de Docker Buildx - name : Set up Docker Buildx uses : docker/setup-buildx-action@v2 # Login \u00e0 GHCR - name : Login to GitHub Container Registry uses : docker/login-action@v2 with : registry : ghcr.io username : ${{ github.actor }} password : ${{ secrets.GHCR_PAT }} # Build et push de l'image Docker - name : Build and Push Docker Image uses : docker/build-push-action@v4 with : push : true tags : ghcr.io/${{ github.repository_owner }}/demo-cicd-atut-backend:latest Explications : Checkout Repository : R\u00e9cup\u00e8re le code source du d\u00e9p\u00f4t. Set up Docker Buildx : Configure Docker Buildx pour la construction avanc\u00e9e d'images. Login to GHCR : Authentifie Docker aupr\u00e8s de GitHub Container Registry en utilisant le secret GHCR_PAT . Build and Push Docker Image : Construit l'image Docker et la pousse vers GHCR avec le tag latest . 2. \ud83e\uddea Ex\u00e9cution de Tests Automatis\u00e9s \u00b6 Ce workflow ex\u00e9cute des tests unitaires \u00e0 chaque pull request vers la branche principale. name : Run Tests on : pull_request : branches : [ main ] jobs : test : runs-on : ubuntu-latest steps : # Checkout du code source - name : Checkout Repository uses : actions/checkout@v3 # Configuration de Python - name : Set up Python uses : actions/setup-python@v4 with : python-version : '3.9' # Installation des d\u00e9pendances - name : Install Dependencies run : | python -m pip install --upgrade pip pip install -r requirements.txt # Ex\u00e9cution des tests - name : Run Tests run : | pytest Explications : Checkout Repository : R\u00e9cup\u00e8re le code source du d\u00e9p\u00f4t. Set up Python : Configure l'environnement Python avec la version sp\u00e9cifi\u00e9e. Install Dependencies : Installe les d\u00e9pendances n\u00e9cessaires \u00e0 l'aide de pip . Run Tests : Ex\u00e9cute les tests unitaires avec pytest . \ud83c\udf89 Conclusion \u00b6 GitHub Actions est un outil puissant et flexible pour automatiser vos workflows de d\u00e9veloppement logiciel \ud83d\ude80. Que ce soit pour construire et d\u00e9ployer vos applications, ex\u00e9cuter des tests automatis\u00e9s ou g\u00e9rer des t\u00e2ches r\u00e9p\u00e9titives, GitHub Actions simplifie le processus et am\u00e9liore l'efficacit\u00e9 de votre \u00e9quipe. En int\u00e9grant GitHub Actions dans votre projet de classification de fruits \ud83c\udf4e\ud83d\ude80, vous b\u00e9n\u00e9ficiez d'une automatisation compl\u00e8te, garantissant que chaque modification de code est test\u00e9e, construite et d\u00e9ploy\u00e9e de mani\u00e8re coh\u00e9rente et fiable. Bon d\u00e9ploiement et automatisation avec GitHub Actions ! \ud83d\udee0\ufe0f\ud83e\udd16 Pour toute question ou assistance suppl\u00e9mentaire, n'h\u00e9sitez pas \u00e0 consulter la documentation officielle ou \u00e0 rejoindre les discussions de la communaut\u00e9 .","title":"GitHub Actions"},{"location":"GithubActions/#github-actions-automatisation-simplifiee-pour-vos-projets","text":"","title":"\ud83e\udd16 GitHub Actions : Automatisation Simplifi\u00e9e pour Vos Projets \ud83d\ude80"},{"location":"GithubActions/#table-des-matieres","text":"\ud83e\udd16 GitHub Actions : Automatisation Simplifi\u00e9e pour Vos Projets \ud83d\ude80 \ud83d\udcda Table des mati\u00e8res Introduction \u2728 Qu'est-ce que GitHub Actions ? \ud83d\udee0\ufe0f Concepts Cl\u00e9s \ud83d\udcc4 \u00c9crire un Workflow \ud83d\udcdd Exemple de Structure \ud83d\udd0d Trouver et Utiliser des Actions O\u00f9 Trouver des Actions ? \ud83d\udee0\ufe0f Utiliser une Action \ud83d\udd04 Cr\u00e9er une Action Personnalis\u00e9e \ud83d\udee0\ufe0f \ud83d\udcda Ressources et Documentation \ud83d\udca1 Exemples de Workflows 1. \ud83d\udc33 Build et Push d'une Image Docker 2. \ud83e\uddea Ex\u00e9cution de Tests Automatis\u00e9s \ud83c\udf89 Conclusion","title":"\ud83d\udcda Table des mati\u00e8res"},{"location":"GithubActions/#introduction","text":"Bienvenue dans cette section d\u00e9di\u00e9e \u00e0 GitHub Actions ! \ud83c\udf89 GitHub Actions est une puissante plateforme d'int\u00e9gration continue et de d\u00e9ploiement continu (CI/CD) int\u00e9gr\u00e9e directement dans GitHub. Elle permet d'automatiser, personnaliser et ex\u00e9cuter vos workflows de d\u00e9veloppement logiciel directement depuis votre d\u00e9p\u00f4t GitHub.","title":"Introduction"},{"location":"GithubActions/#quest-ce-que-github-actions","text":"GitHub Actions est un service d'automatisation propos\u00e9 par GitHub, permettant aux d\u00e9veloppeurs de cr\u00e9er des workflows personnalis\u00e9s pour automatiser des t\u00e2ches telles que : Int\u00e9gration Continue (CI) : Compiler et tester votre code \u00e0 chaque push ou pull request. D\u00e9ploiement Continu (CD) : D\u00e9ployer automatiquement vos applications sur des serveurs ou des services cloud. Automatisation de T\u00e2ches : G\u00e9rer des t\u00e2ches r\u00e9p\u00e9titives comme la gestion des issues, la mise \u00e0 jour des d\u00e9pendances, etc. Avec GitHub Actions, vous pouvez d\u00e9finir des workflows qui s'ex\u00e9cutent en r\u00e9ponse \u00e0 des \u00e9v\u00e9nements sp\u00e9cifiques dans votre d\u00e9p\u00f4t GitHub.","title":"\u2728 Qu'est-ce que GitHub Actions ?"},{"location":"GithubActions/#concepts-cles","text":"Avant de plonger dans l'\u00e9criture des workflows, voici quelques concepts fondamentaux de GitHub Actions : Workflow \ud83d\uddc2\ufe0f : Un workflow est un ensemble automatis\u00e9 de t\u00e2ches d\u00e9finies dans un fichier YAML situ\u00e9 dans le r\u00e9pertoire .github/workflows/ de votre d\u00e9p\u00f4t. Il est d\u00e9clench\u00e9 par des \u00e9v\u00e9nements sp\u00e9cifiques (comme un push, une pull request, etc.). Action \ud83d\udd04 : Une action est une unit\u00e9 r\u00e9utilisable de code qui peut \u00eatre incluse dans vos workflows. Les actions peuvent \u00eatre cr\u00e9\u00e9es par la communaut\u00e9 ou par vous-m\u00eame pour accomplir des t\u00e2ches sp\u00e9cifiques. Runner \ud83c\udfc3\u200d\u2642\ufe0f : Un runner est une machine (auto-h\u00e9berg\u00e9e ou h\u00e9berg\u00e9e par GitHub) qui ex\u00e9cute les jobs de vos workflows. Job \ud83d\udcbc : Un job est une s\u00e9rie de steps (\u00e9tapes) ex\u00e9cut\u00e9es sur le m\u00eame runner. Les jobs peuvent \u00eatre parall\u00e9lis\u00e9s ou d\u00e9pendants les uns des autres. Step \ud83e\ude9c : Une step est une t\u00e2che unique ex\u00e9cut\u00e9e dans un job, pouvant \u00eatre une commande shell ou une action. Event \ud83d\udcc5 : Un event est une action qui d\u00e9clenche un workflow, comme un push, une issue ouverte, ou un planificateur (cron).","title":"\ud83d\udee0\ufe0f Concepts Cl\u00e9s"},{"location":"GithubActions/#ecrire-un-workflow","text":"Les workflows sont d\u00e9finis dans des fichiers YAML situ\u00e9s dans le r\u00e9pertoire .github/workflows/ de votre d\u00e9p\u00f4t. Voici la structure de base d'un fichier de workflow : name : Nom du Workflow on : \u00e9v\u00e9nement : [ branche , type d'\u00e9v\u00e9nement ] jobs : nom_du_job : runs-on : ubuntu-latest steps : - name : \u00c9tape 1 uses : action/nom@version - name : \u00c9tape 2 run : commande \u00e0 ex\u00e9cuter","title":"\ud83d\udcc4 \u00c9crire un Workflow"},{"location":"GithubActions/#exemple-de-structure","text":"name : Nom du workflow (affich\u00e9 dans l'interface GitHub Actions). on : D\u00e9finition des \u00e9v\u00e9nements qui d\u00e9clenchent le workflow. jobs : Liste des jobs \u00e0 ex\u00e9cuter. runs-on : Syst\u00e8me d'exploitation du runner (par exemple, ubuntu-latest ). steps : \u00c9tapes individuelles au sein du job. uses : Utilisation d'une action GitHub. run : Ex\u00e9cution d'une commande shell.","title":"\ud83d\udcdd Exemple de Structure"},{"location":"GithubActions/#trouver-et-utiliser-des-actions","text":"","title":"\ud83d\udd0d Trouver et Utiliser des Actions"},{"location":"GithubActions/#ou-trouver-des-actions","text":"GitHub propose un Marketplace o\u00f9 vous pouvez trouver des milliers d'actions cr\u00e9\u00e9es par la communaut\u00e9 et par GitHub lui-m\u00eame : GitHub Marketplace - Actions","title":"O\u00f9 Trouver des Actions ? \ud83d\udee0\ufe0f"},{"location":"GithubActions/#utiliser-une-action","text":"Pour utiliser une action dans votre workflow, vous pouvez r\u00e9f\u00e9rencer son chemin ou son nom dans la section uses . Par exemple, pour utiliser l'action officielle checkout : steps : - name : Checkout Repository uses : actions/checkout@v3","title":"Utiliser une Action \ud83d\udd04"},{"location":"GithubActions/#creer-une-action-personnalisee","text":"Si les actions disponibles ne r\u00e9pondent pas \u00e0 vos besoins, vous pouvez cr\u00e9er la v\u00f4tre. Voici les \u00e9tapes de base : Cr\u00e9er un R\u00e9pertoire pour votre action, par exemple .github/actions/mon-action . D\u00e9finir un fichier action.yml avec les m\u00e9tadonn\u00e9es de l'action. Ajouter le Code de votre action (scripts, Dockerfile, etc.). Pour plus de d\u00e9tails, consultez la documentation officielle sur la cr\u00e9ation d'actions .","title":"Cr\u00e9er une Action Personnalis\u00e9e \ud83d\udee0\ufe0f"},{"location":"GithubActions/#ressources-et-documentation","text":"Documentation Officielle de GitHub Actions \ud83d\udcd6 : Introduction \u00e0 GitHub Actions D\u00e9finir des Workflows GitHub Actions Marketplace Tutoriels et Guides \ud83d\udcd8 : Guide de D\u00e9marrage Rapide Cr\u00e9er une Action Personnalis\u00e9e Communaut\u00e9 et Support \ud83d\udcac : GitHub Community Discussions Stack Overflow - Tag GitHub Actions","title":"\ud83d\udcda Ressources et Documentation"},{"location":"GithubActions/#exemples-de-workflows","text":"","title":"\ud83d\udca1 Exemples de Workflows"},{"location":"GithubActions/#1-build-et-push-dune-image-docker","text":"Ce workflow est d\u00e9clench\u00e9 \u00e0 chaque push sur la branche principale. Il construit une image Docker et la pousse vers GitHub Container Registry (GHCR). name : Build and Push Docker Image on : push : branches : [ main ] jobs : build : runs-on : ubuntu-latest steps : # Checkout du code source - name : Checkout Repository uses : actions/checkout@v3 # Configuration de Docker Buildx - name : Set up Docker Buildx uses : docker/setup-buildx-action@v2 # Login \u00e0 GHCR - name : Login to GitHub Container Registry uses : docker/login-action@v2 with : registry : ghcr.io username : ${{ github.actor }} password : ${{ secrets.GHCR_PAT }} # Build et push de l'image Docker - name : Build and Push Docker Image uses : docker/build-push-action@v4 with : push : true tags : ghcr.io/${{ github.repository_owner }}/demo-cicd-atut-backend:latest Explications : Checkout Repository : R\u00e9cup\u00e8re le code source du d\u00e9p\u00f4t. Set up Docker Buildx : Configure Docker Buildx pour la construction avanc\u00e9e d'images. Login to GHCR : Authentifie Docker aupr\u00e8s de GitHub Container Registry en utilisant le secret GHCR_PAT . Build and Push Docker Image : Construit l'image Docker et la pousse vers GHCR avec le tag latest .","title":"1. \ud83d\udc33 Build et Push d'une Image Docker"},{"location":"GithubActions/#2-execution-de-tests-automatises","text":"Ce workflow ex\u00e9cute des tests unitaires \u00e0 chaque pull request vers la branche principale. name : Run Tests on : pull_request : branches : [ main ] jobs : test : runs-on : ubuntu-latest steps : # Checkout du code source - name : Checkout Repository uses : actions/checkout@v3 # Configuration de Python - name : Set up Python uses : actions/setup-python@v4 with : python-version : '3.9' # Installation des d\u00e9pendances - name : Install Dependencies run : | python -m pip install --upgrade pip pip install -r requirements.txt # Ex\u00e9cution des tests - name : Run Tests run : | pytest Explications : Checkout Repository : R\u00e9cup\u00e8re le code source du d\u00e9p\u00f4t. Set up Python : Configure l'environnement Python avec la version sp\u00e9cifi\u00e9e. Install Dependencies : Installe les d\u00e9pendances n\u00e9cessaires \u00e0 l'aide de pip . Run Tests : Ex\u00e9cute les tests unitaires avec pytest .","title":"2. \ud83e\uddea Ex\u00e9cution de Tests Automatis\u00e9s"},{"location":"GithubActions/#conclusion","text":"GitHub Actions est un outil puissant et flexible pour automatiser vos workflows de d\u00e9veloppement logiciel \ud83d\ude80. Que ce soit pour construire et d\u00e9ployer vos applications, ex\u00e9cuter des tests automatis\u00e9s ou g\u00e9rer des t\u00e2ches r\u00e9p\u00e9titives, GitHub Actions simplifie le processus et am\u00e9liore l'efficacit\u00e9 de votre \u00e9quipe. En int\u00e9grant GitHub Actions dans votre projet de classification de fruits \ud83c\udf4e\ud83d\ude80, vous b\u00e9n\u00e9ficiez d'une automatisation compl\u00e8te, garantissant que chaque modification de code est test\u00e9e, construite et d\u00e9ploy\u00e9e de mani\u00e8re coh\u00e9rente et fiable. Bon d\u00e9ploiement et automatisation avec GitHub Actions ! \ud83d\udee0\ufe0f\ud83e\udd16 Pour toute question ou assistance suppl\u00e9mentaire, n'h\u00e9sitez pas \u00e0 consulter la documentation officielle ou \u00e0 rejoindre les discussions de la communaut\u00e9 .","title":"\ud83c\udf89 Conclusion"}]}